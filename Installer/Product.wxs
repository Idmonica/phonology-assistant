<?xml version="1.0" encoding="UTF-8"?>
<!-- These variables define the Windows Installer product version, product code and upgrade code. They   -->
<!-- will be used later on in this file.                                                                 -->
<!--<?define Property_ProductVersion = "BUILD_SCRIPT_MUST_REPLACE_AT_RUNTIME" ?> -->
<?define Property_ProductVersion = "3.3.3" ?>
<!--this is replaced at build time by the msbuild 'package' target -->
<?define Property_ProductCode = "*" ?>
<!-- auto-generate a new guid each time -->
<?define Property_UpgradeCode = "{5E57E4D4-580A-4cc1-9E0C-7EF8D3F81BBD}" ?>
<!--Don't even think of EVER changing this -->

<!-- good intro to the component vs. file thing, and why each file here is a separate component:
http://blogs.msdn.com/robmen/archive/2003/10/04/56479.aspx -->

<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" xmlns:netfx="http://schemas.microsoft.com/wix/NetFxExtension">

	<!--<Product Id="$(var.Property_ProductCode)" Name="Phonology Assistant $(var.Property_ProductVersion)" Language="1033"
			   Version="$(var.Property_ProductVersion)" Manufacturer="SIL"
			   UpgradeCode="$(var.Property_UpgradeCode)">-->

	<Product Id="$(var.Property_ProductCode)" Name="Phonology Assistant 3.3.3 (Test Version)" Language="1033"
			   Version="$(var.Property_ProductVersion)" Manufacturer="SIL"
			   UpgradeCode="$(var.Property_UpgradeCode)">

		<Package Compressed="yes" InstallerVersion="200" />

		<Upgrade Id ="$(var.Property_UpgradeCode)" >
			<UpgradeVersion Minimum ="$(var.Property_ProductVersion)" OnlyDetect ="yes" Property ="NEWVERSIONDETECTED" />
			<UpgradeVersion Minimum ="0.0.0" IncludeMinimum ="yes" Maximum ="$(var.Property_ProductVersion)" IncludeMaximum ="no" Property ="OLDERVERSIONBEINGUPGRADED" />
		</Upgrade >

		<!-- 
		"from the list: Don't use Advertise="yes" Advertised shortcuts are designed to allow
		users to install just the shortcut for your app, then demand-install the
		rest of the app the first time the icon is run.  If this is not behavior you
		are trying to support, you're better off using non-advertised shortcuts. "
		-->

		<PropertyRef Id="NETFRAMEWORK35" />
		<Condition Message="Before Phonology Assistant can install, you need to install Microsoft's free .NET Framework 3.5.">
			Installed OR NETFRAMEWORK35
		</Condition>

		<!--because of bug, this needs to be 1 -->
		<Property Id ="ALLUSERS">1</Property>

		<DirectoryRef Id="TARGETDIR">
			<Directory Id='ProgramMenuFolder' Name='Programs'>
				<Directory Id='ShortcutDir' Name='Phonology Assistant $(var.Property_ProductVersion)'>
					<Component Id="AddShortcutDir" Guid="{5F66AE70-D4E4-43A2-A74C-A708CF73D3DA}">
						<Shortcut Id="AppMenuShortcut" Name="Phonology Assistant $(var.Property_ProductVersion)" Target="[!Pa.exe]" />
						<RemoveFolder Id="ApplicationProgramsFolder" On="uninstall"/>
						<RegistryValue Root="HKCU" Key="Software\Phonology Assistant $(var.Property_ProductVersion)" Name="installed" Type="integer" Value="1" KeyPath="yes"/>
					</Component>
				</Directory>
			</Directory>
		</DirectoryRef>

		<Feature Id="ProgramFiles" Level="1" Absent="disallow" Title="Program Files">
			<ComponentRef Id="AddShortcutDir"/>
			<ComponentRef Id="Pa.exe" />
			<ComponentRef Id="Pa.exe.config" />
			<ComponentRef Id="Pa.pdb" />
			<ComponentRef Id="DisablePASplashScreen.exe" />
			<ComponentRef Id="DisablePASplashScreen.pdb" />
			<ComponentRef Id="ICSharpCode.SharpZipLib.dll" />
			<ComponentRef Id="LocalizationManager.dll" />
			<ComponentRef Id="Palaso.dll" />
			<ComponentRef Id="PaToFdoInterfaces.dll" />
      <ComponentRef Id="PaCompiledTransforms.dll" />
      <ComponentRef Id="SilTools.dll" />
			<ComponentRef Id="SilTools.pdb" />
			<ComponentRef Id="Phonology_Assistant_Help.chm" />
			<ComponentRef Id="DoulosSILR.ttf" />
      <ComponentRef Id="CompiledTransforms.zip"   />
      <ComponentGroupRef Id="ConfigurationFiles" />
      <ComponentGroupRef Id="ProcessingFiles" />
    </Feature>

    <Feature Id="TrainingFiles" Level="1" Absent="allow" AllowAdvertise="yes" Title="Training Material">
			<ComponentRef Id="PA_Instructor_Guide.doc" />
			<ComponentRef Id="PA_Needs_Assessment.doc" />
			<ComponentRef Id="PA_Student_Evaluation.doc" />
			<ComponentRef Id="PA_Student_Manual.doc" />
			<ComponentRef Id="TrainingProjectsSetup.xml" />
			<ComponentRef Id="PaTrainingProjects.zip" />
		</Feature>

		<Media Id="1" Cabinet="pa.cab" EmbedCab="yes" CompressionLevel="high" />
		<Icon Id="Pa.exe" SourceFile ="..\output\release\Pa.exe" />
		<Property Id="ARPPRODUCTICON" Value="Pa.exe" />
		<WixVariable Id="WixUILicenseRtf" Value="License.rtf" />
		<Property Id="WIXUI_INSTALLDIR" Value="APPLICATIONFOLDER" />
		<UIRef Id="WixUI_InstallDir" />

		<InstallExecuteSequence>
			<RemoveExistingProducts After="InstallInitialize" />
			<RegisterFonts />
			<!--We need the condition here so that we only launch the executable when we make an installation but not when we remove the product-->
		</InstallExecuteSequence>
	</Product>
</Wix>

