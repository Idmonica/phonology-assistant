<?xml version="1.0" encoding="utf-8" ?>
<!-- ============================================================================================
IMPORTANT NOTICE: command id's must all be unique within the application. That doesn't just mean
unique within a particular XML definition file. It means unique among all the XML definition
files used in a single application.

Item "type" Values:
	0 = Regular Button
	1 = Button with popup arrow that pops-up subitems on a toolbar
	2 = Button with popup arrow that pops-up subitems on a menu
	3 = Button with popup arrow that pops-up a custom (application-defined) control.
	4 = ComboBox
	5 = Container for application-defined control (e.g. goto scripture passage control)
	
	For button's of type 1, 2 and 3, an additional "split" attribute may be present indicating
	whether or not the popup button is split or not. A split button has two portions (a normal
	button portion and a smaller portion containing the drop-down arrow) and each can be
	pressed independently.
	
	Item names with a "tbb" prefix are toolbar buttons.
	Item names with a "mnu" prefix are menu items.
	
	Attributes beginning with dnb are DotNetBar specific.
	
	customizeitem - By default, only menu items are shown in the list of command items in the
	toolbar customization dialog. However, there may be some toolbar items that aren't on the
	menu but should be in the customization list. When applied to a toolbar item, this
	attribute tells the adapter to put the toolbar item in the customization list even though
	it isn't a menu item.

	replacecustomizeitem - By default, only menu items are shown in the list of command items in the
	toolbar customization dialog. However, sometimes the toolbar representation of a menu item
	varies a little from the menu item. For example, when the undo and redo items appear on a
	menu, they act like normal buttons. However, when they appear on a toolbar, the include a
	drop-down arrow allowing the user to drop-down a list of actions to undo/redo. Therefore,
	the toolbar implementation of the undo/redo command differs somewhat from the menu
	implementation. In cases like these, it is desirable to only allow the drop-down version
	of the buttons to be placed on toolbars. Applying this attribute to an item tells the
	adapter to use the item to replace another one that has already been added to the
	collection of customization items. This attribute should only be applied to toolbar items
	and it's expected that the item being replaced is already in the customization collection.
	
	windowlist - This attribute should only be applied to one menu item. It tells the
	adapter the item is the first item in the list of an application's open windows. The item
	with this attribute set to true handle's it's update handler differently from other items.
	When the update handler is called, an argument of type WindowListInfo is passed. The
	update handler should fill-in the list property with the list of windows that should
	be displayed in the menu.

	morewindowsitem - This attribute flags an item as the "More Windows..." item. The
	adapter will automatically make this item visible or hidden as necessary. When there are
	more than 10 items in the window list, the adapter will make this item visible. Otherwise
	it will be hidden.

	allowcustomizing - This attribute for toolbars determines whether or not the last item
	on the toolbar will be the little button that allows the user to customize the items
	that are visible on the toolbar.
	
	settingFilesPrefix - This attribute for toolbars tells the adapter what prefix to use
	when saving or restoring a toolbar's settings from a settings file. A settings file
	saves all the information about a toolbar when the form it belongs to is closed. That
	is how user customization information is saved. The file format for a toolbar's
	settings format is: prefix.toolbarname.xml where toolbarname is replaced with the
	toolbar's name (i.e. the name attribute of toolbar definition sections below).
	
	onmodalform - In the event the toolbar adapter allows toolbar's to be undocked, this
	attribute for toolbars tells the adapter the toolbars will be placed on a modal form.
	Therefore, the adapter will not allow toolbar's to be undocked. The reason being,
	after toolbars are undocked, they cannot be docked again since the modal form doesn't
	allow other windows (which undocked toolbars are) in the application to gain focus.

	style - Toolbar item styles are 'textonly', 'imageonly', and 'imageandtext'.
	'imageonly' is the default.
============================================================================================ -->
<TMDef>
	<resources>
		<!-- localizedstrings are for strings for toolbars, toolbar and menu items, tooltips,
			and categories -->
		<localizedstrings assemblyPath="PaApp.dll" class="SIL.Pa.ResourceStrings.PaTMStrings"/>

		<!-- imageList assemblyPath="PaApp.dll"
			class="SIL.Pa.Resources.ResourceHelper"
			field="DefineFeaturesImages"
			labels="CmdEditFeatures, CmdAddFeatures, CmdRestoreDefaults, CmdSortFeatures,
				CmdSortIPAChars">
		</imageList -->
	</resources>

	<commands>
		<command id="CmdSortIPAChars"/>
		<command id="CmdSortFeatures"/>
		<command id="CmdSortCodepointOrder" message="SortByCodepointOrder"/>
		<command id="CmdSortMOAOrder" message="SortByMOAOrder"/>
		<command id="CmdSortPOAOrder" message="SortByPOAOrder"/>
		<command id="CmdEditFeatures" message="EditFeatures"/>
		<command id="CmdAddFeatures" message="AddFeatures"/>
		<command id="CmdRestoreDefaults" message="RestoreDefaults"/>
	</commands>

	<!-- **************** -->
	<!-- MENU DEFINITIONS -->
	<!-- **************** -->
	<menus>
		<item name="mnuSortIPAChars" commandid="CmdSortIPAChars">
			<item name="mnuSortCodepointOrder" commandid="CmdSortCodepointOrder"/>
			<item name="mnuSortMOAOrder" commandid="CmdSortMOAOrder"/>
			<item name="mnuSortPOAOrder" commandid="CmdSortPOAOrder"/>
		</item>
	</menus>
</TMDef>